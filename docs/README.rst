.. _readme:

BorgBackup Formula
==================

|img_sr| |img_pc|

.. |img_sr| image:: https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg
   :alt: Semantic Release
   :scale: 100%
   :target: https://github.com/semantic-release/semantic-release
.. |img_pc| image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white
   :alt: pre-commit
   :scale: 100%
   :target: https://github.com/pre-commit/pre-commit

Manage BorgBackup with Salt.

.. contents:: **Table of Contents**
   :depth: 1

General notes
-------------

See the full `SaltStack Formulas installation and usage instructions
<https://docs.saltstack.com/en/latest/topics/development/conventions/formulas.html>`_.

If you are interested in writing or contributing to formulas, please pay attention to the `Writing Formula Section
<https://docs.saltstack.com/en/latest/topics/development/conventions/formulas.html#writing-formulas>`_.

If you want to use this formula, please pay attention to the ``FORMULA`` file and/or ``git tag``,
which contains the currently released version. This formula is versioned according to `Semantic Versioning <http://semver.org/>`_.

See `Formula Versioning Section <https://docs.saltstack.com/en/latest/topics/development/conventions/formulas.html#versioning>`_ for more details.

If you need (non-default) configuration, please refer to:

- `how to configure the formula with map.jinja <map.jinja.rst>`_
- the ``pillar.example`` file
- the `Special notes`_ section

Special notes
-------------


Configuration
-------------
An example pillar is provided, please see `pillar.example`. Note that you do not need to specify everything by pillar. Often, it's much easier and less resource-heavy to use the ``parameters/<grain>/<value>.yaml`` files for non-sensitive settings. The underlying logic is explained in `map.jinja`.


Available states
----------------

The following states are found in this formula:

.. contents::
   :local:


``borg``
^^^^^^^^



``borg.package``
^^^^^^^^^^^^^^^^
Installs the borg package only.

If ``borg:install:method`` == ``bin``, also ensures the release signing key
is present in the root keychain and verifies the release signature
by default before installing from GitHub releases.

Mind that for the binary method to succeed, it requires my patched ``gpg``
and ``file`` modules currently (might land in master eventually, PR pending).
When using ``latest`` as version, this requires my custom ``github_releases`` module as well.


``borg.server``
^^^^^^^^^^^^^^^
Handles system setup and repository management
specific to a borg server.

Includes `borg.server.package`_ and `borg.server.repos`_.


``borg.server.package``
^^^^^^^^^^^^^^^^^^^^^^^
Creates a ``borg`` user and a directory to host
repositories in.


``borg.server.repos``
^^^^^^^^^^^^^^^^^^^^^
Creates an entry in the ``borg`` user's ``authorized_keys`` file
for each minion that has sent a public key to the mine and for
configured ones.

For mine sources, only minions that have the pillar value
``borg_role`` == ``client`` are included. The mine-sourced
public keys will be restricted to a repository named exactly
the same as the minion ID. If you need more fine-grained control,
you will need to configure SSH certificates instead.


``borg.client``
^^^^^^^^^^^^^^^
Creates an SSH key and either

* sends it to the mine as ``borg_pubkey`` in order for the server
  to allow syncing to a repo with its associated private key or
* if ``client:certs`` is configured and the ``ssh_pki`` modules
  are available, generates client certificates that can be used
  to grant access. They should contain a ``force-command`` similar
  to the one generated by ``server:repos``: ``borg serve --restrict-to-repository <reponame>``.
  You should set this in the signing policy, not locally, hence
  the parameter is not generated automatically.


``borg.clean``
^^^^^^^^^^^^^^
*Meta-state*.

Undoes everything performed in the ``borg`` meta-state
in reverse order, i.e.
uninstalls the package
and includes `borg.client.clean`_ or `borg.server.clean`_,
depending on the pillar value of ``borg_role``.


``borg.package.clean``
^^^^^^^^^^^^^^^^^^^^^^
Removes the borg package.


``borg.server.clean``
^^^^^^^^^^^^^^^^^^^^^
Undoes most of the things `borg.server`_ configures.

Includes `borg.server.package.clean`_ and `borg.server.repos.clean`_.


``borg.server.package.clean``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Removes the ``borg`` user and, if the repository directory
is managed as a symlink only, will also remove the symlink.

Does not delete the actual directory containing the repositories
to prevent accidental data loss.


``borg.server.repos.clean``
^^^^^^^^^^^^^^^^^^^^^^^^^^^
Ensures there are **no** authorized keys in the ``borg`` user's
``authorized_keys`` file.


``borg.client.clean``
^^^^^^^^^^^^^^^^^^^^^
Ensures the client's SSH public/private key and possibly
certificates generated by this formula are absent from
the local filesystem and the mine.



Contributing to this repo
-------------------------

Commit messages
^^^^^^^^^^^^^^^

**Commit message formatting is significant!**

Please see `How to contribute <https://github.com/saltstack-formulas/.github/blob/master/CONTRIBUTING.rst>`_ for more details.

pre-commit
^^^^^^^^^^

`pre-commit <https://pre-commit.com/>`_ is configured for this formula, which you may optionally use to ease the steps involved in submitting your changes.
First install  the ``pre-commit`` package manager using the appropriate `method <https://pre-commit.com/#installation>`_, then run ``bin/install-hooks`` and
now ``pre-commit`` will run automatically on each ``git commit``. ::

  $ bin/install-hooks
  pre-commit installed at .git/hooks/pre-commit
  pre-commit installed at .git/hooks/commit-msg

State documentation
~~~~~~~~~~~~~~~~~~~
There is a script that semi-autodocuments available states: ``bin/slsdoc``.

If a ``.sls`` file begins with a Jinja comment, it will dump that into the docs. It can be configured differently depending on the formula. See the script source code for details currently.

This means if you feel a state should be documented, make sure to write a comment explaining it.

Testing
-------

Linux testing is done with ``kitchen-salt``.

Requirements
^^^^^^^^^^^^

* Ruby
* Docker

.. code-block:: bash

   $ gem install bundler
   $ bundle install
   $ bin/kitchen test [platform]

Where ``[platform]`` is the platform name defined in ``kitchen.yml``,
e.g. ``debian-9-2019-2-py3``.

``bin/kitchen converge``
^^^^^^^^^^^^^^^^^^^^^^^^

Creates the docker instance and runs the ``borg`` main state, ready for testing.

``bin/kitchen verify``
^^^^^^^^^^^^^^^^^^^^^^

Runs the ``inspec`` tests on the actual instance.

``bin/kitchen destroy``
^^^^^^^^^^^^^^^^^^^^^^^

Removes the docker instance.

``bin/kitchen test``
^^^^^^^^^^^^^^^^^^^^

Runs all of the stages above in one go: i.e. ``destroy`` + ``converge`` + ``verify`` + ``destroy``.

``bin/kitchen login``
^^^^^^^^^^^^^^^^^^^^^

Gives you SSH access to the instance for manual testing.
