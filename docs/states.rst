Available states
----------------

The following states are found in this formula:

.. contents::
   :local:


``borg``
^^^^^^^^



``borg.package``
^^^^^^^^^^^^^^^^
Installs the borg package only.

If ``borg:install:method`` == ``bin``, also ensures the release signing key
is present in the root keychain and verifies the release signature
by default before installing from GitHub releases.

Mind that for the binary method to succeed, it requires my patched ``gpg``
and ``file`` modules currently (might land in master eventually, PR pending).
When using ``latest`` as version, this requires my custom ``github_releases`` module as well.


``borg.server``
^^^^^^^^^^^^^^^
Handles system setup and repository management
specific to a borg server.

Includes `borg.server.package`_ and `borg.server.repos`_.


``borg.server.package``
^^^^^^^^^^^^^^^^^^^^^^^
Creates a ``borg`` user and a directory to host
repositories in.


``borg.server.repos``
^^^^^^^^^^^^^^^^^^^^^
Creates an entry in the ``borg`` user's ``authorized_keys`` file
for each minion that has sent a public key to the mine.

Only minions that have the pillar value ``borg_role`` == ``client``
are included.


``borg.client``
^^^^^^^^^^^^^^^
Creates an SSH key and sends it to the mine as ``borg_pubkey``
in order for the server to allow syncing to a repo
with its associated private key.


``borg.clean``
^^^^^^^^^^^^^^
*Meta-state*.

Undoes everything performed in the ``borg`` meta-state
in reverse order, i.e.
uninstalls the package
and includes `borg.client.clean`_ or `borg.server.clean`_,
depending on the pillar value of ``borg_role``.


``borg.package.clean``
^^^^^^^^^^^^^^^^^^^^^^
Removes the borg package.


``borg.server.clean``
^^^^^^^^^^^^^^^^^^^^^
Undoes most of the things `borg.server`_ configures.

Includes `borg.server.package.clean`_ and `borg.server.repos.clean`_.


``borg.server.package.clean``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Removes the ``borg`` user and, if the repository directory
is managed as a symlink only, will also remove the symlink.

Does not delete the actual directory containing the repositories
to prevent accidental data loss.


``borg.server.repos.clean``
^^^^^^^^^^^^^^^^^^^^^^^^^^^
Ensures there are **no** authorized keys in the ``borg`` user's
``authorized_keys`` file.


``borg.client.clean``
^^^^^^^^^^^^^^^^^^^^^
Ensures the client's SSH key generated by this formula
is absent from the local filesystem and the mine.


